/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateShiftSlotWarningRequest,
  Language,
  PatchedUpdateShiftSlotWarningRequest,
  ShiftSlotWarning,
} from '../models/index';
import {
    CreateShiftSlotWarningRequestFromJSON,
    CreateShiftSlotWarningRequestToJSON,
    LanguageFromJSON,
    LanguageToJSON,
    PatchedUpdateShiftSlotWarningRequestFromJSON,
    PatchedUpdateShiftSlotWarningRequestToJSON,
    ShiftSlotWarningFromJSON,
    ShiftSlotWarningToJSON,
} from '../models/index';

export interface ShiftsApiShiftSlotWarningCreateRequest {
    createShiftSlotWarningRequest: CreateShiftSlotWarningRequest;
}

export interface ShiftsApiShiftSlotWarningDestroyRequest {
    id: number;
}

export interface ShiftsApiShiftSlotWarningPartialUpdateRequest {
    patchedUpdateShiftSlotWarningRequest?: PatchedUpdateShiftSlotWarningRequest;
}

export interface ShiftsShiftSlotWarningsRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class ShiftsApi extends runtime.BaseAPI {

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsApiLanguagesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Language>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shifts/api/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LanguageFromJSON));
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsApiLanguagesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Language>> {
        const response = await this.shiftsApiLanguagesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsApiShiftSlotWarningCreateRaw(requestParameters: ShiftsApiShiftSlotWarningCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['createShiftSlotWarningRequest'] == null) {
            throw new runtime.RequiredError(
                'createShiftSlotWarningRequest',
                'Required parameter "createShiftSlotWarningRequest" was null or undefined when calling shiftsApiShiftSlotWarningCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shifts/api/shift_slot_warning`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShiftSlotWarningRequestToJSON(requestParameters['createShiftSlotWarningRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsApiShiftSlotWarningCreate(requestParameters: ShiftsApiShiftSlotWarningCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.shiftsApiShiftSlotWarningCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsApiShiftSlotWarningDestroyRaw(requestParameters: ShiftsApiShiftSlotWarningDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling shiftsApiShiftSlotWarningDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shifts/api/shift_slot_warning`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsApiShiftSlotWarningDestroy(requestParameters: ShiftsApiShiftSlotWarningDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.shiftsApiShiftSlotWarningDestroyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsApiShiftSlotWarningPartialUpdateRaw(requestParameters: ShiftsApiShiftSlotWarningPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shifts/api/shift_slot_warning`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUpdateShiftSlotWarningRequestToJSON(requestParameters['patchedUpdateShiftSlotWarningRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsApiShiftSlotWarningPartialUpdate(requestParameters: ShiftsApiShiftSlotWarningPartialUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.shiftsApiShiftSlotWarningPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsShiftSlotWarningsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShiftSlotWarning>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shifts/shift_slot_warnings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShiftSlotWarningFromJSON));
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsShiftSlotWarningsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShiftSlotWarning>> {
        const response = await this.shiftsShiftSlotWarningsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsShiftSlotWarningsRetrieveRaw(requestParameters: ShiftsShiftSlotWarningsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShiftSlotWarning>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling shiftsShiftSlotWarningsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shifts/shift_slot_warnings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShiftSlotWarningFromJSON(jsonValue));
    }

    /**
     * Verify that the current user has all specified permissions.
     */
    async shiftsShiftSlotWarningsRetrieve(requestParameters: ShiftsShiftSlotWarningsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShiftSlotWarning> {
        const response = await this.shiftsShiftSlotWarningsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
