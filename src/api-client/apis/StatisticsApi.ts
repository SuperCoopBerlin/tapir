/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface StatisticsNumberOfActiveMembersAtDateRetrieveRequest {
    atDate: Date;
}

export interface StatisticsNumberOfCoPurchasersAtDateRetrieveRequest {
    atDate: Date;
}

export interface StatisticsNumberOfFlyingMembersAtDateRetrieveRequest {
    atDate: Date;
}

export interface StatisticsNumberOfFrozenMembersAtDateRetrieveRequest {
    atDate: Date;
}

export interface StatisticsNumberOfLongTermFrozenMembersAtDateRetrieveRequest {
    atDate: Date;
}

export interface StatisticsNumberOfMembersAtDateRetrieveRequest {
    atDate: Date;
}

export interface StatisticsNumberOfPurchasingMembersAtDateRetrieveRequest {
    atDate: Date;
}

export interface StatisticsNumberOfShiftPartnersAtDateRetrieveRequest {
    atDate: Date;
}

export interface StatisticsNumberOfWorkingMembersAtDateRetrieveRequest {
    atDate: Date;
}

/**
 * 
 */
export class StatisticsApi extends runtime.BaseAPI {

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfActiveMembersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfActiveMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfActiveMembersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_active_members_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfActiveMembersAtDateRetrieve(requestParameters: StatisticsNumberOfActiveMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfActiveMembersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfCoPurchasersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfCoPurchasersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfCoPurchasersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_co_purchasers_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfCoPurchasersAtDateRetrieve(requestParameters: StatisticsNumberOfCoPurchasersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfCoPurchasersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfFlyingMembersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfFlyingMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfFlyingMembersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_flying_members_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfFlyingMembersAtDateRetrieve(requestParameters: StatisticsNumberOfFlyingMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfFlyingMembersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfFrozenMembersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfFrozenMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfFrozenMembersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_frozen_members_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfFrozenMembersAtDateRetrieve(requestParameters: StatisticsNumberOfFrozenMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfFrozenMembersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfLongTermFrozenMembersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfLongTermFrozenMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfLongTermFrozenMembersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_long_term_frozen_members_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfLongTermFrozenMembersAtDateRetrieve(requestParameters: StatisticsNumberOfLongTermFrozenMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfLongTermFrozenMembersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfMembersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfMembersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_members_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfMembersAtDateRetrieve(requestParameters: StatisticsNumberOfMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfMembersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfPurchasingMembersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfPurchasingMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfPurchasingMembersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_purchasing_members_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfPurchasingMembersAtDateRetrieve(requestParameters: StatisticsNumberOfPurchasingMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfPurchasingMembersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfShiftPartnersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfShiftPartnersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfShiftPartnersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_shift_partners_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfShiftPartnersAtDateRetrieve(requestParameters: StatisticsNumberOfShiftPartnersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfShiftPartnersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfWorkingMembersAtDateRetrieveRaw(requestParameters: StatisticsNumberOfWorkingMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsNumberOfWorkingMembersAtDateRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/number_of_working_members_at_date`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsNumberOfWorkingMembersAtDateRetrieve(requestParameters: StatisticsNumberOfWorkingMembersAtDateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsNumberOfWorkingMembersAtDateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
