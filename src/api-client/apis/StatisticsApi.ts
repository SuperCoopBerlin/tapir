/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Column,
  DatapointExport,
  Dataset,
} from '../models/index';
import {
    ColumnFromJSON,
    ColumnToJSON,
    DatapointExportFromJSON,
    DatapointExportToJSON,
    DatasetFromJSON,
    DatasetToJSON,
} from '../models/index';

export interface StatisticsAvailableDatasetsListRequest {
    colourblindness: string;
}

export interface StatisticsExportDatasetListRequest {
    atDate: Date;
    dataset: string;
    exportColumns: Array<string>;
}

export interface StatisticsGraphPointRetrieveRequest {
    atDate: Date;
    dataset: string;
    relative: boolean;
}

/**
 * 
 */
export class StatisticsApi extends runtime.BaseAPI {

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsAvailableColourblindnessTypesRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/available_colourblindness_types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsAvailableColourblindnessTypesRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.statisticsAvailableColourblindnessTypesRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsAvailableDatasetsListRaw(requestParameters: StatisticsAvailableDatasetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Dataset>>> {
        if (requestParameters['colourblindness'] == null) {
            throw new runtime.RequiredError(
                'colourblindness',
                'Required parameter "colourblindness" was null or undefined when calling statisticsAvailableDatasetsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['colourblindness'] != null) {
            queryParameters['colourblindness'] = requestParameters['colourblindness'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/available_datasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatasetFromJSON));
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsAvailableDatasetsList(requestParameters: StatisticsAvailableDatasetsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Dataset>> {
        const response = await this.statisticsAvailableDatasetsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsAvailableExportColumnsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Column>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/available_export_columns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ColumnFromJSON));
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsAvailableExportColumnsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Column>> {
        const response = await this.statisticsAvailableExportColumnsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsExportDatasetListRaw(requestParameters: StatisticsExportDatasetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DatapointExport>>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsExportDatasetList().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling statisticsExportDatasetList().'
            );
        }

        if (requestParameters['exportColumns'] == null) {
            throw new runtime.RequiredError(
                'exportColumns',
                'Required parameter "exportColumns" was null or undefined when calling statisticsExportDatasetList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['dataset'] != null) {
            queryParameters['dataset'] = requestParameters['dataset'];
        }

        if (requestParameters['exportColumns'] != null) {
            queryParameters['export_columns'] = requestParameters['exportColumns'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/export_dataset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatapointExportFromJSON));
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsExportDatasetList(requestParameters: StatisticsExportDatasetListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DatapointExport>> {
        const response = await this.statisticsExportDatasetListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsGraphPointRetrieveRaw(requestParameters: StatisticsGraphPointRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['atDate'] == null) {
            throw new runtime.RequiredError(
                'atDate',
                'Required parameter "atDate" was null or undefined when calling statisticsGraphPointRetrieve().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling statisticsGraphPointRetrieve().'
            );
        }

        if (requestParameters['relative'] == null) {
            throw new runtime.RequiredError(
                'relative',
                'Required parameter "relative" was null or undefined when calling statisticsGraphPointRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['atDate'] != null) {
            queryParameters['at_date'] = (requestParameters['atDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['dataset'] != null) {
            queryParameters['dataset'] = requestParameters['dataset'];
        }

        if (requestParameters['relative'] != null) {
            queryParameters['relative'] = requestParameters['relative'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/graph_point`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify that the current user is authenticated.
     */
    async statisticsGraphPointRetrieve(requestParameters: StatisticsGraphPointRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statisticsGraphPointRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
