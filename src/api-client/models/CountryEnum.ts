/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * * `AD` - Andorra
 * * `AE` - United Arab Emirates
 * * `AF` - Afghanistan
 * * `AG` - Antigua & Barbuda
 * * `AI` - Anguilla
 * * `AL` - Albania
 * * `AM` - Armenia
 * * `AN` - Netherlands Antilles
 * * `AO` - Angola
 * * `AQ` - Antarctica
 * * `AR` - Argentina
 * * `AS` - American Samoa
 * * `AT` - Austria
 * * `AU` - Australia
 * * `AW` - Aruba
 * * `AZ` - Azerbaijan
 * * `BA` - Bosnia and Herzegovina
 * * `BB` - Barbados
 * * `BD` - Bangladesh
 * * `BE` - Belgium
 * * `BF` - Burkina Faso
 * * `BG` - Bulgaria
 * * `BH` - Bahrain
 * * `BI` - Burundi
 * * `BJ` - Benin
 * * `BM` - Bermuda
 * * `BN` - Brunei Darussalam
 * * `BO` - Bolivia
 * * `BR` - Brazil
 * * `BS` - Bahama
 * * `BT` - Bhutan
 * * `BV` - Bouvet Island
 * * `BW` - Botswana
 * * `BY` - Belarus
 * * `BZ` - Belize
 * * `CA` - Canada
 * * `CC` - Cocos (Keeling) Islands
 * * `CF` - Central African Republic
 * * `CG` - Congo
 * * `CH` - Switzerland
 * * `CI` - Ivory Coast
 * * `CK` - Cook Iislands
 * * `CL` - Chile
 * * `CM` - Cameroon
 * * `CN` - China
 * * `CO` - Colombia
 * * `CR` - Costa Rica
 * * `CU` - Cuba
 * * `CV` - Cape Verde
 * * `CX` - Christmas Island
 * * `CY` - Cyprus
 * * `CZ` - Czech Republic
 * * `DE` - Germany
 * * `DJ` - Djibouti
 * * `DK` - Denmark
 * * `DM` - Dominica
 * * `DO` - Dominican Republic
 * * `DZ` - Algeria
 * * `EC` - Ecuador
 * * `EE` - Estonia
 * * `EG` - Egypt
 * * `EH` - Western Sahara
 * * `ER` - Eritrea
 * * `ES` - Spain
 * * `ET` - Ethiopia
 * * `FI` - Finland
 * * `FJ` - Fiji
 * * `FK` - Falkland Islands (Malvinas)
 * * `FM` - Micronesia
 * * `FO` - Faroe Islands
 * * `FR` - France
 * * `FX` - France, Metropolitan
 * * `GA` - Gabon
 * * `GB` - United Kingdom (Great Britain)
 * * `GD` - Grenada
 * * `GE` - Georgia
 * * `GF` - French Guiana
 * * `GH` - Ghana
 * * `GI` - Gibraltar
 * * `GL` - Greenland
 * * `GM` - Gambia
 * * `GN` - Guinea
 * * `GP` - Guadeloupe
 * * `GQ` - Equatorial Guinea
 * * `GR` - Greece
 * * `GS` - South Georgia and the South Sandwich Islands
 * * `GT` - Guatemala
 * * `GU` - Guam
 * * `GW` - Guinea-Bissau
 * * `GY` - Guyana
 * * `HK` - Hong Kong
 * * `HM` - Heard & McDonald Islands
 * * `HN` - Honduras
 * * `HR` - Croatia
 * * `HT` - Haiti
 * * `HU` - Hungary
 * * `ID` - Indonesia
 * * `IE` - Ireland
 * * `IL` - Israel
 * * `IN` - India
 * * `IO` - British Indian Ocean Territory
 * * `IQ` - Iraq
 * * `IR` - Islamic Republic of Iran
 * * `IS` - Iceland
 * * `IT` - Italy
 * * `JM` - Jamaica
 * * `JO` - Jordan
 * * `JP` - Japan
 * * `KE` - Kenya
 * * `KG` - Kyrgyzstan
 * * `KH` - Cambodia
 * * `KI` - Kiribati
 * * `KM` - Comoros
 * * `KN` - St. Kitts and Nevis
 * * `KP` - Korea, Democratic People's Republic of
 * * `KR` - Korea, Republic of
 * * `KW` - Kuwait
 * * `KY` - Cayman Islands
 * * `KZ` - Kazakhstan
 * * `LA` - Lao People's Democratic Republic
 * * `LB` - Lebanon
 * * `LC` - Saint Lucia
 * * `LI` - Liechtenstein
 * * `LK` - Sri Lanka
 * * `LR` - Liberia
 * * `LS` - Lesotho
 * * `LT` - Lithuania
 * * `LU` - Luxembourg
 * * `LV` - Latvia
 * * `LY` - Libyan Arab Jamahiriya
 * * `MA` - Morocco
 * * `MC` - Monaco
 * * `MD` - Moldova, Republic of
 * * `MG` - Madagascar
 * * `MH` - Marshall Islands
 * * `ML` - Mali
 * * `MN` - Mongolia
 * * `MM` - Myanmar
 * * `MO` - Macau
 * * `MP` - Northern Mariana Islands
 * * `MQ` - Martinique
 * * `MR` - Mauritania
 * * `MS` - Monserrat
 * * `MT` - Malta
 * * `MU` - Mauritius
 * * `MV` - Maldives
 * * `MW` - Malawi
 * * `MX` - Mexico
 * * `MY` - Malaysia
 * * `MZ` - Mozambique
 * * `NA` - Namibia
 * * `NC` - New Caledonia
 * * `NE` - Niger
 * * `NF` - Norfolk Island
 * * `NG` - Nigeria
 * * `NI` - Nicaragua
 * * `NL` - Netherlands
 * * `NO` - Norway
 * * `NP` - Nepal
 * * `NR` - Nauru
 * * `NU` - Niue
 * * `NZ` - New Zealand
 * * `OM` - Oman
 * * `PA` - Panama
 * * `PE` - Peru
 * * `PF` - French Polynesia
 * * `PG` - Papua New Guinea
 * * `PH` - Philippines
 * * `PK` - Pakistan
 * * `PL` - Poland
 * * `PM` - St. Pierre & Miquelon
 * * `PN` - Pitcairn
 * * `PR` - Puerto Rico
 * * `PT` - Portugal
 * * `PW` - Palau
 * * `PY` - Paraguay
 * * `QA` - Qatar
 * * `RE` - Reunion
 * * `RO` - Romania
 * * `RU` - Russian Federation
 * * `RW` - Rwanda
 * * `SA` - Saudi Arabia
 * * `SB` - Solomon Islands
 * * `SC` - Seychelles
 * * `SD` - Sudan
 * * `SE` - Sweden
 * * `SG` - Singapore
 * * `SH` - St. Helena
 * * `SI` - Slovenia
 * * `SJ` - Svalbard & Jan Mayen Islands
 * * `SK` - Slovakia
 * * `SL` - Sierra Leone
 * * `SM` - San Marino
 * * `SN` - Senegal
 * * `SO` - Somalia
 * * `SR` - Suriname
 * * `ST` - Sao Tome & Principe
 * * `SV` - El Salvador
 * * `SY` - Syrian Arab Republic
 * * `SZ` - Swaziland
 * * `TC` - Turks & Caicos Islands
 * * `TD` - Chad
 * * `TF` - French Southern Territories
 * * `TG` - Togo
 * * `TH` - Thailand
 * * `TJ` - Tajikistan
 * * `TK` - Tokelau
 * * `TM` - Turkmenistan
 * * `TN` - Tunisia
 * * `TO` - Tonga
 * * `TP` - East Timor
 * * `TR` - Turkey
 * * `TT` - Trinidad & Tobago
 * * `TV` - Tuvalu
 * * `TW` - Taiwan, Province of China
 * * `TZ` - Tanzania, United Republic of
 * * `UA` - Ukraine
 * * `UG` - Uganda
 * * `UM` - United States Minor Outlying Islands
 * * `US` - United States of America
 * * `UY` - Uruguay
 * * `UZ` - Uzbekistan
 * * `VA` - Vatican City State (Holy See)
 * * `VC` - St. Vincent & the Grenadines
 * * `VE` - Venezuela
 * * `VG` - British Virgin Islands
 * * `VI` - United States Virgin Islands
 * * `VN` - Viet Nam
 * * `VU` - Vanuatu
 * * `WF` - Wallis & Futuna Islands
 * * `WS` - Samoa
 * * `YE` - Yemen
 * * `YT` - Mayotte
 * * `YU` - Yugoslavia
 * * `ZA` - South Africa
 * * `ZM` - Zambia
 * * `ZR` - Zaire
 * * `ZW` - Zimbabwe
 * * `ZZ` - Unknown or unspecified country
 * @export
 */
export const CountryEnum = {
    Ad: 'AD',
    Ae: 'AE',
    Af: 'AF',
    Ag: 'AG',
    Ai: 'AI',
    Al: 'AL',
    Am: 'AM',
    An: 'AN',
    Ao: 'AO',
    Aq: 'AQ',
    Ar: 'AR',
    As: 'AS',
    At: 'AT',
    Au: 'AU',
    Aw: 'AW',
    Az: 'AZ',
    Ba: 'BA',
    Bb: 'BB',
    Bd: 'BD',
    Be: 'BE',
    Bf: 'BF',
    Bg: 'BG',
    Bh: 'BH',
    Bi: 'BI',
    Bj: 'BJ',
    Bm: 'BM',
    Bn: 'BN',
    Bo: 'BO',
    Br: 'BR',
    Bs: 'BS',
    Bt: 'BT',
    Bv: 'BV',
    Bw: 'BW',
    By: 'BY',
    Bz: 'BZ',
    Ca: 'CA',
    Cc: 'CC',
    Cf: 'CF',
    Cg: 'CG',
    Ch: 'CH',
    Ci: 'CI',
    Ck: 'CK',
    Cl: 'CL',
    Cm: 'CM',
    Cn: 'CN',
    Co: 'CO',
    Cr: 'CR',
    Cu: 'CU',
    Cv: 'CV',
    Cx: 'CX',
    Cy: 'CY',
    Cz: 'CZ',
    De: 'DE',
    Dj: 'DJ',
    Dk: 'DK',
    Dm: 'DM',
    Do: 'DO',
    Dz: 'DZ',
    Ec: 'EC',
    Ee: 'EE',
    Eg: 'EG',
    Eh: 'EH',
    Er: 'ER',
    Es: 'ES',
    Et: 'ET',
    Fi: 'FI',
    Fj: 'FJ',
    Fk: 'FK',
    Fm: 'FM',
    Fo: 'FO',
    Fr: 'FR',
    Fx: 'FX',
    Ga: 'GA',
    Gb: 'GB',
    Gd: 'GD',
    Ge: 'GE',
    Gf: 'GF',
    Gh: 'GH',
    Gi: 'GI',
    Gl: 'GL',
    Gm: 'GM',
    Gn: 'GN',
    Gp: 'GP',
    Gq: 'GQ',
    Gr: 'GR',
    Gs: 'GS',
    Gt: 'GT',
    Gu: 'GU',
    Gw: 'GW',
    Gy: 'GY',
    Hk: 'HK',
    Hm: 'HM',
    Hn: 'HN',
    Hr: 'HR',
    Ht: 'HT',
    Hu: 'HU',
    Id: 'ID',
    Ie: 'IE',
    Il: 'IL',
    In: 'IN',
    Io: 'IO',
    Iq: 'IQ',
    Ir: 'IR',
    Is: 'IS',
    It: 'IT',
    Jm: 'JM',
    Jo: 'JO',
    Jp: 'JP',
    Ke: 'KE',
    Kg: 'KG',
    Kh: 'KH',
    Ki: 'KI',
    Km: 'KM',
    Kn: 'KN',
    Kp: 'KP',
    Kr: 'KR',
    Kw: 'KW',
    Ky: 'KY',
    Kz: 'KZ',
    La: 'LA',
    Lb: 'LB',
    Lc: 'LC',
    Li: 'LI',
    Lk: 'LK',
    Lr: 'LR',
    Ls: 'LS',
    Lt: 'LT',
    Lu: 'LU',
    Lv: 'LV',
    Ly: 'LY',
    Ma: 'MA',
    Mc: 'MC',
    Md: 'MD',
    Mg: 'MG',
    Mh: 'MH',
    Ml: 'ML',
    Mn: 'MN',
    Mm: 'MM',
    Mo: 'MO',
    Mp: 'MP',
    Mq: 'MQ',
    Mr: 'MR',
    Ms: 'MS',
    Mt: 'MT',
    Mu: 'MU',
    Mv: 'MV',
    Mw: 'MW',
    Mx: 'MX',
    My: 'MY',
    Mz: 'MZ',
    Na: 'NA',
    Nc: 'NC',
    Ne: 'NE',
    Nf: 'NF',
    Ng: 'NG',
    Ni: 'NI',
    Nl: 'NL',
    No: 'NO',
    Np: 'NP',
    Nr: 'NR',
    Nu: 'NU',
    Nz: 'NZ',
    Om: 'OM',
    Pa: 'PA',
    Pe: 'PE',
    Pf: 'PF',
    Pg: 'PG',
    Ph: 'PH',
    Pk: 'PK',
    Pl: 'PL',
    Pm: 'PM',
    Pn: 'PN',
    Pr: 'PR',
    Pt: 'PT',
    Pw: 'PW',
    Py: 'PY',
    Qa: 'QA',
    Re: 'RE',
    Ro: 'RO',
    Ru: 'RU',
    Rw: 'RW',
    Sa: 'SA',
    Sb: 'SB',
    Sc: 'SC',
    Sd: 'SD',
    Se: 'SE',
    Sg: 'SG',
    Sh: 'SH',
    Si: 'SI',
    Sj: 'SJ',
    Sk: 'SK',
    Sl: 'SL',
    Sm: 'SM',
    Sn: 'SN',
    So: 'SO',
    Sr: 'SR',
    St: 'ST',
    Sv: 'SV',
    Sy: 'SY',
    Sz: 'SZ',
    Tc: 'TC',
    Td: 'TD',
    Tf: 'TF',
    Tg: 'TG',
    Th: 'TH',
    Tj: 'TJ',
    Tk: 'TK',
    Tm: 'TM',
    Tn: 'TN',
    To: 'TO',
    Tp: 'TP',
    Tr: 'TR',
    Tt: 'TT',
    Tv: 'TV',
    Tw: 'TW',
    Tz: 'TZ',
    Ua: 'UA',
    Ug: 'UG',
    Um: 'UM',
    Us: 'US',
    Uy: 'UY',
    Uz: 'UZ',
    Va: 'VA',
    Vc: 'VC',
    Ve: 'VE',
    Vg: 'VG',
    Vi: 'VI',
    Vn: 'VN',
    Vu: 'VU',
    Wf: 'WF',
    Ws: 'WS',
    Ye: 'YE',
    Yt: 'YT',
    Yu: 'YU',
    Za: 'ZA',
    Zm: 'ZM',
    Zr: 'ZR',
    Zw: 'ZW',
    Zz: 'ZZ'
} as const;
export type CountryEnum = typeof CountryEnum[keyof typeof CountryEnum];


export function instanceOfCountryEnum(value: any): boolean {
    for (const key in CountryEnum) {
        if (Object.prototype.hasOwnProperty.call(CountryEnum, key)) {
            if (CountryEnum[key as keyof typeof CountryEnum] === value) {
                return true;
            }
        }
    }
    return false;
}

export function CountryEnumFromJSON(json: any): CountryEnum {
    return CountryEnumFromJSONTyped(json, false);
}

export function CountryEnumFromJSONTyped(json: any, ignoreDiscriminator: boolean): CountryEnum {
    return json as CountryEnum;
}

export function CountryEnumToJSON(value?: CountryEnum | null): any {
    return value as any;
}

export function CountryEnumToJSONTyped(value: any, ignoreDiscriminator: boolean): CountryEnum {
    return value as CountryEnum;
}

