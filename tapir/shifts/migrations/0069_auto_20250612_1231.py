# Generated by Django 5.1.5 on 2025-06-12 10:31

from django.db import migrations
from django.db.models import Model


class ShiftUserCapabilityOld:
    SHIFT_COORDINATOR = "shift_coordinator"
    CASHIER = "cashier"
    MEMBER_OFFICE = "member_office"
    BREAD_DELIVERY = "bread_delivery"
    RED_CARD = "red_card"
    FIRST_AID = "first_aid"
    WELCOME_SESSION = "welcome_session"
    HANDLING_CHEESE = "handling_cheese"
    TRAIN_CHEESE_HANDLERS = "train_cheese_handlers"
    INVENTORY = "inventory"
    NEBENAN_DE_SUPPORT = "nebenan_de_support"


SHIFT_USER_CAPABILITY_CHOICES_OLD = {
    ShiftUserCapabilityOld.SHIFT_COORDINATOR: "Teamleader",
    ShiftUserCapabilityOld.CASHIER: "Cashier",
    ShiftUserCapabilityOld.MEMBER_OFFICE: "Member Office",
    ShiftUserCapabilityOld.BREAD_DELIVERY: "Bread Delivery",
    ShiftUserCapabilityOld.RED_CARD: "Red Card",
    ShiftUserCapabilityOld.FIRST_AID: "First Aid",
    ShiftUserCapabilityOld.WELCOME_SESSION: "Welcome Session",
    ShiftUserCapabilityOld.HANDLING_CHEESE: "Handling Cheese",
    ShiftUserCapabilityOld.TRAIN_CHEESE_HANDLERS: "Train cheese handlers",
    ShiftUserCapabilityOld.INVENTORY: "Inventory",
    ShiftUserCapabilityOld.NEBENAN_DE_SUPPORT: "Nebenan.de-Support",
}

TRANSLATIONS = {
    "Teamleader": "Teamleiter*in",
    "Cashier": "Kasse",
    "Member Office": "Mitgliederbüro",
    "Bread Delivery": "Brotlieferung",
    "Red Card": "Rote Karte Lebensmittel",
    "First Aid": "Erste Hilfe",
    "Handling Cheese": "Käse bearbeiten",
    "Train cheese handlers": "Käse-Bearbeiten Training",
    "Inventory": "Inventur",
    "Nebenan.de-Support": "Nebenan.de-Betreuung",
}


def create_new_capability_and_translations(apps, capability_old_id: str):
    shift_user_capability_new_model = apps.get_model("shifts", "ShiftUserCapabilityNew")
    shift_user_capability_translation_model = apps.get_model(
        "shifts", "ShiftUserCapabilityTranslation"
    )
    new_capability = shift_user_capability_new_model.objects.create()
    english_name = SHIFT_USER_CAPABILITY_CHOICES_OLD[capability_old_id]
    german_name = TRANSLATIONS[english_name]
    shift_user_capability_translation_model.objects.bulk_create(
        [
            shift_user_capability_translation_model(
                language="en",
                name=english_name,
                description="",
                capability=new_capability,
            ),
            shift_user_capability_translation_model(
                language="en",
                name=german_name,
                description="",
                capability=new_capability,
            ),
        ]
    )
    return new_capability


def populate_capabilities_generic(
    apps,
    model: Model,
    old_field_name: str,
    new_field_name: str,
    new_capabilities_by_old_id: dict,
):

    for obj in model.objects.all():
        must_save_object = False
        for capability_old_id in getattr(obj, old_field_name):
            if capability_old_id not in new_capabilities_by_old_id.keys():
                new_capabilities_by_old_id[capability_old_id] = (
                    create_new_capability_and_translations(apps, capability_old_id)
                )
            getattr(obj, new_field_name).add(
                new_capabilities_by_old_id[capability_old_id]
            )
            must_save_object = True
        if must_save_object:
            obj.save()


def populate_shift_slot_template_capabilities(apps, new_capabilities_by_old_id: dict):
    shift_slot_template_model = apps.get_model("shifts", "ShiftSlotTemplate")
    populate_capabilities_generic(
        apps,
        shift_slot_template_model,
        "required_capabilities",
        "required_capabilities_new",
        new_capabilities_by_old_id,
    )


def populate_shift_slot_capabilities(apps, new_capabilities_by_old_id: dict):
    shift_slot_model = apps.get_model("shifts", "ShiftSlot")
    populate_capabilities_generic(
        apps,
        shift_slot_model,
        "required_capabilities",
        "required_capabilities_new",
        new_capabilities_by_old_id,
    )


def populate_shift_user_data_capabilities(apps, new_capabilities_by_old_id: dict):
    shift_user_data_model = apps.get_model("shifts", "ShiftUserData")
    populate_capabilities_generic(
        apps,
        shift_user_data_model,
        "capabilities",
        "capabilities_new",
        new_capabilities_by_old_id,
    )


def populate_all_new_fields(apps, _):
    new_capabilities_by_old_id = {}
    populate_shift_slot_template_capabilities(apps, new_capabilities_by_old_id)
    populate_shift_slot_capabilities(apps, new_capabilities_by_old_id)
    populate_shift_user_data_capabilities(apps, new_capabilities_by_old_id)


class Migration(migrations.Migration):
    dependencies = [("shifts", "0068_shiftusercapabilitynew_and_more")]
    operations = [
        migrations.RunPython(populate_all_new_fields),
    ]
