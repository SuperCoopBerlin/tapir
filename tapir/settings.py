"""
Django settings for tapir project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import email.utils
import os
from datetime import timedelta
from pathlib import Path

import celery.schedules
import django_auth_ldap
import environ
import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType, NestedGroupOfNamesType

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "SECRET_KEY", default="fl%20e9dbkh4mosi5$i$!5&+f^ic5=7^92hrchl89x+)k0ctsn"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG", cast=bool, default=False)

ALLOWED_HOSTS = env("ALLOWED_HOSTS", cast=list, default=["*"])

ENABLE_SILK_PROFILING = False

ENABLE_RIZOMA_CONTENT = env.bool("ENABLE_RIZOMA_CONTENT", default=False)

# Application definition
INSTALLED_APPS = [
    # Must come before contrib.auth to let the custom templates be discovered for auth views
    "tapir.accounts",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django_bootstrap5",
    "tapir.core",
    "tapir.log",
    "tapir.shifts",
    "tapir.utils",
    "tapir.coop",
    "tapir.welcomedesk",
    "tapir.statistics",
    "tapir.financingcampaign",
    "django_tables2",
    "django_filters",
    "django_select2",  # For autocompletion in form fields
    "phonenumber_field",
    "django_extensions",
    "chartjs",
    "rest_framework",
    "drf_spectacular",
    "django_vite",
]

if ENABLE_RIZOMA_CONTENT:
    INSTALLED_APPS.append("tapir.rizoma")

if ENABLE_SILK_PROFILING:
    INSTALLED_APPS.append("silk")

MIDDLEWARE = [
    "tapir.core.middleware.SendExceptionsToSlackMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "tapir.welcomedesk.middleware.WelcomeDeskPermsMiddleware",
    "tapir.accounts.models.language_middleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if ENABLE_SILK_PROFILING:
    MIDDLEWARE = ["silk.middleware.SilkyMiddleware"] + MIDDLEWARE

ROOT_URLCONF = "tapir.urls"

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "tapir/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "tapir.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DB_DOCKER_SERVICE_NAME = env.str(var="DB_DOCKER_SERVICE_NAME", default="db")
DATABASES = {
    "default": env.db(
        default=f"postgresql://tapir:tapir@{DB_DOCKER_SERVICE_NAME}:5432/tapir"
    ),
}

SHIFTS_ONLY = env.bool("SHIFTS_ONLY", default=False)

REDIS_DOCKER_SERVICE_NAME = env.str(var="REDIS_DOCKER_SERVICE_NAME", default="redis")
CELERY_BROKER_URL = f"redis://{REDIS_DOCKER_SERVICE_NAME}:6379"
CELERY_RESULT_BACKEND = f"redis://{REDIS_DOCKER_SERVICE_NAME}:6379"
CELERY_BEAT_SCHEDULE = {
    "send_shift_reminders": {
        "task": "tapir.shifts.tasks.send_shift_reminders",
        "schedule": celery.schedules.crontab(
            hour="*/2", minute=5
        ),  # Every two hours five minutes after the hour
    },
    "apply_shift_cycle_start": {
        "task": "tapir.shifts.tasks.apply_shift_cycle_start",
        "schedule": celery.schedules.crontab(hour="*/2", minute="20"),
    },
    "generate_shifts": {
        "task": "tapir.shifts.tasks.generate_shifts",
        "schedule": celery.schedules.crontab(minute=0, hour=0),
    },
    "run_freeze_checks": {
        "task": "tapir.shifts.tasks.run_freeze_checks",
        "schedule": celery.schedules.crontab(minute=0, hour=1),
    },
    "send_flying_member_registration_reminder_mails": {
        "task": "tapir.shifts.tasks.send_flying_member_registration_reminder_mails",
        "schedule": celery.schedules.crontab(minute=0, hour=4),
    },
}

if not SHIFTS_ONLY:
    CELERY_BEAT_SCHEDULE.update(
        {
            "send_accounting_recap": {
                "task": "tapir.coop.tasks.send_accounting_recap",
                "schedule": celery.schedules.crontab(
                    hour="12", minute="0", day_of_week="sunday"
                ),
            },
            "update_purchase_tracking_list": {
                "task": "tapir.accounts.tasks.update_purchase_tracking_list",
                "schedule": celery.schedules.crontab(minute=0, hour=23),
            },
            "process_purchase_files": {
                "task": "tapir.statistics.tasks.process_purchase_files",
                "schedule": celery.schedules.crontab(minute=0, hour=3),
            },
            "process_credit_account": {
                "task": "tapir.statistics.tasks.process_credit_account",
                "schedule": celery.schedules.crontab(minute=0, hour=3),
            },
            "send_create_account_reminder": {
                "task": "tapir.accounts.tasks.send_create_account_reminder",
                "schedule": celery.schedules.crontab(minute=0, hour=12),
            },
            "metabase_export": {
                "task": "tapir.core.tasks.metabase_export",
                "schedule": celery.schedules.crontab(minute=0, hour=3),
            },
        }
    )

if ENABLE_RIZOMA_CONTENT:
    CELERY_BEAT_SCHEDULE.update(
        {
            "sync_users_with_coops_pt_backend": {
                "task": "tapir.rizoma.tasks.sync_users_with_coops_pt_backend",
                "schedule": celery.schedules.crontab(hour="*", minute="0"),
            },
        }
    )

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
PASSWORD_RESET_TIMEOUT = (
    7776000  # 90 days, so that the welcome emails stay valid for long enough
)


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "de"
if ENABLE_RIZOMA_CONTENT:
    LANGUAGE_CODE = "en"
TIME_ZONE = "Europe/Berlin"
USE_I18N = True
USE_TZ = True

EMAIL_ADDRESS_MEMBER_OFFICE = "mitglied@supercoop.de"
EMAIL_ADDRESS_ACCOUNTING_TEAM = "accounting@supercoop.de"
EMAIL_ADDRESS_ACCOUNTING_SOFTWARE = env.str(
    "EMAIL_ADDRESS_ACCOUNTING_SOFTWARE", default=None
)
EMAIL_ADDRESS_MANAGEMENT = "contact@supercoop.de"
EMAIL_ADDRESS_SUPERVISORS = "aufsichtsrat@supercoop.de"

# django-environ EMAIL_URL mechanism is a bit hairy with passwords with slashes in them, so use this instead
EMAIL_ENV = env("EMAIL_ENV", default="dev")
if EMAIL_ENV == "dev" or EMAIL_ENV == "test":
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
elif EMAIL_ENV == "prod":
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = env("EMAIL_HOST", default="mail.your-server.de")
    EMAIL_HOST_USER = env("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True


COOP_NAME = "SuperCoop Berlin"
COOP_FULL_NAME = "SuperCoop Berlin eG"
COOP_STREET = "Oudenarder Straße 16"
COOP_PLACE = "13347 Berlin"
FROM_EMAIL_MEMBER_OFFICE = f"{COOP_NAME} Mitgliederbüro <{EMAIL_ADDRESS_MEMBER_OFFICE}>"
DEFAULT_FROM_EMAIL = FROM_EMAIL_MEMBER_OFFICE


# DJANGO_ADMINS="Blake <blake@cyb.org>, Alice Judge <alice@cyb.org>"
ADMINS = tuple(email.utils.parseaddr(x) for x in env.list("DJANGO_ADMINS", default=[]))
# Crash emails will come from this address.
# NOTE(Leon Handreke): I don't know if our Google SMTP will reject other senders, so play it safe.
SERVER_EMAIL = env("SERVER_EMAIL", default=EMAIL_ADDRESS_MEMBER_OFFICE)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [BASE_DIR / "dist"]

SELECT2_JS = "core/select2/4.0.13/js/select2.min.js"
SELECT2_CSS = "core/select2/4.0.13/css/select2.min.css"
SELECT2_I18N_PATH = "core/select2/4.0.13/js/i18n"

WEASYPRINT_BASEURL = "/"

REG_PERSON_BASE_DN = "ou=people,dc=supercoop,dc=de"
REG_PERSON_OBJECT_CLASSES = ["inetOrgPerson", "organizationalPerson", "person"]
REG_GROUP_BASE_DN = "ou=groups,dc=supercoop,dc=de"
REG_GROUP_OBJECT_CLASSES = ["groupOfNames"]

PERMISSION_SHIFTS_ADMIN = "shifts.admin"
PERMISSION_SHIFTS_MANAGE = "shifts.manage"
PERMISSION_SHIFTS_EXEMPTIONS = "shifts.exemptions"
PERMISSION_COOP_VIEW = "coop.view"
PERMISSION_COOP_MANAGE = "coop.manage"
PERMISSION_COOP_ADMIN = "coop.admin"
PERMISSION_ACCOUNTS_VIEW = "accounts.view"
PERMISSION_ACCOUNTS_MANAGE = "accounts.manage"
PERMISSION_WELCOMEDESK_VIEW = "welcomedesk.view"
PERMISSION_ACCOUNTING_VIEW = "accounting.view"
PERMISSION_ACCOUNTING_MANAGE = "accounting.manage"
PERMISSION_GROUP_MANAGE = "group.manage"
PERMISSION_RESIGNATION_VIEW = "resignation.view"
PERMISSION_RESIGNATION_MANAGE = "resignation.manage"

# Groups are stored in the LDAP tree
GROUP_VORSTAND = "vorstand"
GROUP_MEMBER_OFFICE = "member-office"
GROUP_SHIFT_MANAGER = "shift-manager"
GROUP_ACCOUNTING = "accounting"
GROUP_WELCOME_DESK = "welcomedesk-only"
GROUP_EMPLOYEES = "employees"

LDAP_GROUPS = {
    GROUP_VORSTAND,
    GROUP_MEMBER_OFFICE,
    GROUP_SHIFT_MANAGER,
    GROUP_ACCOUNTING,
    GROUP_WELCOME_DESK,
    GROUP_EMPLOYEES,
}


PERMISSIONS = {
    PERMISSION_SHIFTS_ADMIN: {
        GROUP_VORSTAND,
        GROUP_EMPLOYEES,
    },
    PERMISSION_SHIFTS_MANAGE: {
        GROUP_VORSTAND,
        GROUP_MEMBER_OFFICE,
        GROUP_SHIFT_MANAGER,
        GROUP_EMPLOYEES,
    },
    PERMISSION_SHIFTS_EXEMPTIONS: {
        GROUP_VORSTAND,
        GROUP_MEMBER_OFFICE,
        GROUP_EMPLOYEES,
    },
    PERMISSION_COOP_VIEW: {
        GROUP_VORSTAND,
        GROUP_MEMBER_OFFICE,
        GROUP_ACCOUNTING,
        GROUP_EMPLOYEES,
    },
    PERMISSION_COOP_MANAGE: {
        GROUP_VORSTAND,
        GROUP_MEMBER_OFFICE,
        GROUP_EMPLOYEES,
    },
    PERMISSION_COOP_ADMIN: {GROUP_VORSTAND},
    PERMISSION_ACCOUNTS_VIEW: {
        GROUP_VORSTAND,
        GROUP_MEMBER_OFFICE,
        GROUP_ACCOUNTING,
        GROUP_EMPLOYEES,
    },
    PERMISSION_ACCOUNTS_MANAGE: {
        GROUP_VORSTAND,
        GROUP_MEMBER_OFFICE,
        GROUP_EMPLOYEES,
    },
    PERMISSION_WELCOMEDESK_VIEW: {
        GROUP_VORSTAND,
        GROUP_MEMBER_OFFICE,
        GROUP_WELCOME_DESK,
        GROUP_EMPLOYEES,
    },
    PERMISSION_ACCOUNTING_VIEW: {
        GROUP_VORSTAND,
        GROUP_MEMBER_OFFICE,
        GROUP_ACCOUNTING,
        GROUP_EMPLOYEES,
    },
    PERMISSION_ACCOUNTING_MANAGE: {
        GROUP_VORSTAND,
        GROUP_ACCOUNTING,
    },
    PERMISSION_GROUP_MANAGE: {GROUP_VORSTAND, GROUP_EMPLOYEES},
    PERMISSION_RESIGNATION_VIEW: {
        GROUP_VORSTAND,
        GROUP_EMPLOYEES,
        GROUP_MEMBER_OFFICE,
        GROUP_ACCOUNTING,
    },
    PERMISSION_RESIGNATION_MANAGE: {
        GROUP_VORSTAND,
        GROUP_EMPLOYEES,
        GROUP_MEMBER_OFFICE,
    },
}

AUTH_USER_MODEL = "accounts.TapirUser"
LOGIN_REDIRECT_URL = "accounts:user_me"

SITE_URL = env("SITE_URL", default="http://localhost:8000")
CSRF_TRUSTED_ORIGINS = [SITE_URL]

PHONENUMBER_DEFAULT_REGION = "DE"
if ENABLE_RIZOMA_CONTENT:
    PHONENUMBER_DEFAULT_REGION = "PT"

LOCALE_PATHS = [os.path.join(BASE_DIR, "tapir/translations/locale")]

if ENABLE_SILK_PROFILING:
    SILKY_PYTHON_PROFILER = True
    SILKY_META = True
    SILKY_PROFILE_DIR = "silk_profiling"

SLACK_BOT_TOKEN = env("SLACK_BOT_TOKEN", cast=str, default="")

LOGIN_BACKEND_LDAP = "ldap"
LOGIN_BACKEND_COOPS_PT = "coops.pt"
ACTIVE_LOGIN_BACKEND = env.str("ACTIVE_LOGIN_BACKEND", default=LOGIN_BACKEND_LDAP)

if ACTIVE_LOGIN_BACKEND == LOGIN_BACKEND_LDAP:
    AUTHENTICATION_BACKENDS = ["django_auth_ldap.backend.LDAPBackend"]
if ACTIVE_LOGIN_BACKEND == LOGIN_BACKEND_COOPS_PT:
    AUTHENTICATION_BACKENDS = ["tapir.rizoma.coops_pt_auth_backend.CoopsPtAuthBackend"]

LDAP_DOCKER_SERVICE_NAME = env("LDAP_DOCKER_SERVICE_NAME", cast=str, default="openldap")
AUTH_LDAP_SERVER_URI = f"ldap://{LDAP_DOCKER_SERVICE_NAME}"
AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=people,dc=supercoop,dc=de"
AUTH_LDAP_BIND_DN = "cn=admin,dc=supercoop,dc=de"
AUTH_LDAP_BIND_PASSWORD = env("LDAP_ADMIN_PASSWORD", cast=str, default="admin")

AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    "ou=groups,dc=supercoop,dc=de",
    ldap.SCOPE_SUBTREE,
    "(objectClass=top)",
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
}

DJANGO_VITE = {
    "default": {
        "dev_mode": env("DJANGO_VITE_DEBUG", cast=bool, default=False),
        "manifest_path": "./dist/manifest.json",
    }
}

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

if ACTIVE_LOGIN_BACKEND == LOGIN_BACKEND_COOPS_PT:
    COOPS_PT_API_BASE_URL = env.str("COOPS_PT_API_BASE_URL")
    COOPS_PT_API_KEY = env.str("COOPS_PT_API_KEY")
    COOPS_PT_RSA_PUBLIC_KEY_FILE_PATH = env.str("COOPS_PT_RSA_PUBLIC_KEY_FILE_PATH")


RUNNING_TESTS = False

PATH_TO_GOOGLE_CLIENT_SECRET_FILE = env.str(
    "PATH_TO_GOOGLE_CLIENT_SECRET_FILE", default="google_client_secret_desktop.json"
)
